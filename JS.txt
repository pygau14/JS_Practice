-> JS basic intro
-> Script tag
-> var , let and const 
-> Data types - Number , String , null , undefined and SYmbols.




Js - Numbers - Integers, floating(numbers with decimal)

using var , let and const variable define - implicity -> 

let name='john'; -> ist programme


let name = 58;



JAVA -> int name = 
    String name = 




    DOM - Document Object Model 

    <html>
        <head></head>
        <body>
            <div>
                <h1></h1>
                <p></p>
                <img>
    </html>


    DOM Manipulation - Changing the current DOM - adding or removing or modifying the existing DOM
    - Element access  - document.getElemmentByID BY classname , 



    // Client - Server Architecture 
    Based on some actions by user/end-user/ Client -> Request which is sent to our server or backend -> backend with send a response 



    By default the js behaviour is synchrous .
    but there few keywordw which make js async - setTImeout , setInterval , promises in js/ ES6 (async-await).

    js is single threaded or multi threaded language - js is single threaded only(js can execute single code at at time) but it is asynchronus 

     thread  - execution 
     excel sheet | visual studio code - front end 
     dual core  - 2 cores - simulatansouly - excel sheet  | visual studio code

     octa core - 8 core  - multitasking for 8 process.

     callback - function that is passed as an argument to other function.


     Js Intro 
Js Data types 
Js const , let and var
Js control structure - if-else , for and while 
Js DOM manipulation - 
Js Thread of execution/callback functions

Js promises - fetch
promise will either fulfill or not fulfill 
when promise is fulfilled it will be under the then block
when promise is not fullfilled it will be under the catch block


Arror functions - we dont like naming functions everytime 
- defining standard function is long so shorthand is arrow fucntions 

()=>{
    return 
}
fucntion greet(name){
    return
}

// argument passed in arrow functions
(name)=>{
    return "hello" + name; 
}

(name,age,email)=>{

}


JSON - Js object notation - similar to objects in js 

There are lot of frameworks of js - angular , react , vue , next , node js , express js , tesseract-js
 jSON and js objects - there is inverted commas in key in JSON but not in objects in js.


// fetch syntax -
fetch(url).then(()=>{
    // statment when promise is fulfilled ie. sucessfull case
}).catch(()=>{
    // when promise is not fulfilled || error type situation.
})

// objects handling 
// ES6 new functionalities 
// Error handling

Error Handling 
- using Try and catch

// Online Javascript Editor for free
// Write, Edit and Run your Javascript code using JS Online Compiler

// function divide(a,b){
// 	if(b === 0){
// 	throw new Error('Division by 0 not possible....');
// 	}
// 	return a/b;
// }
// console.log(divide(10,0));
// try {
// 	console.log(divide(10,0));
// }catch{
// console.log('Error ----cathed by catch block');
// };


// console.log(name);
// var name= 'john';


// var name = 'john';
// let name1 = 'ellen'
// intilization and declaration 

// var name; - decalartion of variable - variable ko define krna 
// name = 'John' - intialization - variable value dalna 

// Hositing is the process happens for var and fucntions 
// their decalaration automatically moves at the top.

// 20 lines of code 

// name = 'john';
// console.log(name);
// var name;

// sayhello();
// function sayhello(){
//     console.log('Hello');
// }
//  Hositing as advantage 
//  - fetchTheRadius ---> calculateArea

// function fetchRadius(){
//     // code which fetching the radius
//     calculateArea()
// }

// function calculateArea(){
//     // code to calculate area
// }

// // Online Javascript Editor for free
// Write, Edit and Run your Javascript code using JS Online Compiler

// When the declaration of var and function is automatically defined at the begining of any execution of Js program.

// console.log(name);
// var name = 'John';

// //break 
// var name; 
// console.log(name);
// name = 'john'

// name = 'john';
// console.log(name);
// var name; 
// 
// var name;
// name='john'
// console.log(name); 

// console.log(x);
// var x =5; // op = undefined

// console.log(y)
// let y= 20; //op - reference error


// var a = 10;
// function foo(){
//     console.log(a);
//     var a =20;
// }
// foo() o/p - undefined as first the priority is local scope then global scope

// var a =10; 
// {
//     var a;
//     console.log
//     a =20; 
// }


// == only checks the value while === checks the value and data type
// console.log(10 === '10');
// var i = 10;
// if(true){
//     console.log(i);
//     var i = 30;
// } - when if true is there it will also search the global scope also directly. here the function scope priority will not come into the picture


// Closures : 
it is concept of Javascript which allows fucntions to retain access to variables from their outer lexical environemnt.


lexical environemnt : 
 scope and its environemnt - Two components -> its scope and its environemnt
                                              reference to outer variables.


function outer(){
    var x = 30;

    fucntion inner(){
        console.log(x);
    }

    inner()
}

outer()

// Online Javascript Editor for free
// Write, Edit and Run your Javascript code using JS Online Compiler

// When the declaration of var and function is automatically defined at the begining of any execution of Js program.

// console.log(name);
// var name = 'John';

// //break 
// var name; 
// console.log(name);
// name = 'john'

// name = 'john';
// console.log(name);
// var name; 
// 
// var name;
// name='john'
// console.log(name); 

// console.log(x);
// var x =5; // op = undefined

// console.log(y)
// let y= 20; //op - reference error


// var a = 10;
// function foo(){
//     console.log(a);
//     var a =20;
// }
// foo() o/p - undefined as first the priority is local scope then global scope

// var a =10; 
// {
//     var a;
//     console.log
//     a =20; 
// }


// == only checks the value while === checks the value and data type
// console.log(10 === '10');
// var i = 10;
// if(true){
//     console.log(i);
//     var i = 30;
// } - when if true is there it will also search the global scope also directly. here the function scope priority will not come into the picture

// function outer(){
//     var x = 30;

//     function inner(){
//         console.log(x);
        
//     }

//     inner()
// }

// outer()

// lexical enviroment of inner fucntion - access of var x which have value as 30
// function inner() has no its own variable however it has access to the varible outside of this scope 

// function outer(){
//     var x = 30;
//     function inner(){
//         var y = 5;
//         console.log(x + y);
//     }
//     inner()
// }
// outer()

// lexical Enviorment of inner fucntion  ->
// two components -> 1) var y(from its own scope) 2)var x (variable outside of its scope)
//  var x = 30;
// function outer(){

//     function inner(){
//         var y = 5;
//         console.log(x + y);
//     }
//     inner()
// }
// outer()

// // lexical of enviroment of outer fucnction :
// -> 1) fucntion inner(), - own scope
//   2)  var x - outer scope

// function inner() of lexical Enviroment - > 
//  - var y = own scope 
//  - var x - out of scope


// function outer(){
//     function foo(){
//         var x = 30;
//     }
//     function inner(){
//         var y = 5;
//         console.log(x + y);
//     }
//     inner()
//     foo()
// }
// outer()

// lexical env - outer function
// - foo , inner - own scope 
// - no variable access  - out of its own scope

// lexical env of -foo function 
// - var x - own scope 
// - no variable  - out of its own scope 

// lexical env of inner fucntion 
// - var y - own scope 
// - no variable - out of its own scope 

// var x = 40;
// function outer(){
//     function foo(){
//         var x= 30;
//     }
//     function inner(){
//         var y = 5;
//         console.log(x + y);
//     }
//     foo()
//     inner()
// }
// outer()

// lexical env of outer function 
// - foo(), inner() - own scope 
// - var x = 40; - out of its own scope 

// lexical env of foo function 
// - var x= 30 - own scope 
//  - no variable - out of its own scope
 
//  lexical env of inner function 
//  - var y =5 - own scope 
//   - no variable  - out of its own scope.

// so here the closure is formed between the inner fucntion and lexical env of outer fucn which had access of var x= 40;
// so closure is formed between this var x and the inner function inner.
  
 
 function outer(){
     var x = 40;
     function inner(){
         var y = 5;
         console.log(x+y);
     }
     inner(); // return inner;
 }
 
 var result  = outer();

lexical env of outer function - 
var x = 4- - own scope 
no variable - out of its own scope

lexical env of inner function 
var y = 5; - own scope 
var x = 40 - outside of its own scope which is lexical env of outer fucntion so as inner is the child of outer so it is able to access the outer function lexical env which forms the closure between the two parent-child fucntions.



asynchronus Javascript


synchrous - one by one from top to bottom and asynchronus

function one(){
    var name = "eve";
    console.log(name);
    let num =6;
    let result = num * num;
}
one();

asynchrous 

execution will be done parallely

setTImeout(function, 5000);
console.log("Error");

Callback functions :
 - it is common way to handle asynchronus behaviour in js
 - argument pass to the asynchrous function - setTImeout , setInterval , fetch.

 function multiply(num1 , num2){
    return num1*num2;
 }

 multiply(2,3);

function greet(name, callback){
    console.log("Hello",name);
    callback();
}

function goodbye(){
    console.log(goodbye);
}

// function myFirst(){
//     console.log("first");
// }
// function mySecond(){
//     console.log('second');
// }
// myFirst();
// mySecond();


// function myFirst(){
//     console.log("first");
//     mySecond();
// }
// function mySecond(){
//     console.log('second');
// }
// myFirst();



function myFirst(text , mycallback){
    console.log(text);
    mycallback();
}

function mySecond(){
    console.log('second');
}

myFirst('first',mySecond);

