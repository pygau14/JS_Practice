-> JS basic intro
-> Script tag
-> var , let and const 
-> Data types - Number , String , null , undefined and SYmbols.




Js - Numbers - Integers, floating(numbers with decimal)

using var , let and const variable define - implicity -> 

let name='john'; -> ist programme


let name = 58;



JAVA -> int name = 
    String name = 




    DOM - Document Object Model 

    <html>
        <head></head>
        <body>
            <div>
                <h1></h1>
                <p></p>
                <img>
    </html>


    DOM Manipulation - Changing the current DOM - adding or removing or modifying the existing DOM
    - Element access  - document.getElemmentByID BY classname , 



    // Client - Server Architecture 
    Based on some actions by user/end-user/ Client -> Request which is sent to our server or backend -> backend with send a response 



    By default the js behaviour is synchrous .
    but there few keywordw which make js async - setTImeout , setInterval , promises in js/ ES6 (async-await).

    js is single threaded or multi threaded language - js is single threaded only(js can execute single code at at time) but it is asynchronus 

     thread  - execution 
     excel sheet | visual studio code - front end 
     dual core  - 2 cores - simulatansouly - excel sheet  | visual studio code

     octa core - 8 core  - multitasking for 8 process.

     callback - function that is passed as an argument to other function.


     Js Intro 
Js Data types 
Js const , let and var
Js control structure - if-else , for and while 
Js DOM manipulation - 
Js Thread of execution/callback functions

Js promises - fetch
promise will either fulfill or not fulfill 
when promise is fulfilled it will be under the then block
when promise is not fullfilled it will be under the catch block


Arror functions - we dont like naming functions everytime 
- defining standard function is long so shorthand is arrow fucntions 

()=>{
    return 
}
fucntion greet(name){
    return
}

// argument passed in arrow functions
(name)=>{
    return "hello" + name; 
}

(name,age,email)=>{

}


JSON - Js object notation - similar to objects in js 

There are lot of frameworks of js - angular , react , vue , next , node js , express js , tesseract-js
 jSON and js objects - there is inverted commas in key in JSON but not in objects in js.


// fetch syntax -
fetch(url).then(()=>{
    // statment when promise is fulfilled ie. sucessfull case
}).catch(()=>{
    // when promise is not fulfilled || error type situation.
})
